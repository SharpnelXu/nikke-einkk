// GENERATED CODE - DO NOT MODIFY BY HAND

part of '../../model/skills.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

SkillValueData _$SkillValueDataFromJson(Map<String, dynamic> json) => SkillValueData(
  skillValueType: $enumDecodeNullable(_$ValueTypeEnumMap, json['skill_value_type']) ?? ValueType.unknown,
  skillValue: (json['skill_value'] as num?)?.toInt() ?? 0,
);

Map<String, dynamic> _$SkillValueDataToJson(SkillValueData instance) => <String, dynamic>{
  'skill_value_type': _$ValueTypeEnumMap[instance.skillValueType]!,
  'skill_value': instance.skillValue,
};

const _$ValueTypeEnumMap = {
  ValueType.none: 'None',
  ValueType.integer: 'Integer',
  ValueType.percent: 'Percent',
  ValueType.unknown: 'Unknown',
};

SkillData _$SkillDataFromJson(Map<String, dynamic> json) => SkillData(
  id: (json['id'] as num?)?.toInt() ?? 0,
  skillCooltime: (json['skill_cooltime'] as num?)?.toInt() ?? 0,
  attackType: $enumDecodeNullable(_$AttackTypeEnumMap, json['attack_type']) ?? AttackType.unknown,
  counterType: json['counter_type'] as String? ?? '',
  preferTarget: $enumDecodeNullable(_$PreferTargetEnumMap, json['prefer_target']) ?? PreferTarget.unknown,
  preferTargetCondition:
      $enumDecodeNullable(_$PreferTargetConditionEnumMap, json['prefer_target_condition']) ??
      PreferTargetCondition.unknown,
  skillType: $enumDecodeNullable(_$CharacterSkillTypeEnumMap, json['skill_type']) ?? CharacterSkillType.unknown,
  skillValueData:
      (json['skill_value_data'] as List<dynamic>?)
          ?.map((e) => SkillValueData.fromJson(e as Map<String, dynamic>))
          .toList() ??
      const [],
  durationType: $enumDecodeNullable(_$DurationTypeEnumMap, json['duration_type']) ?? DurationType.unknown,
  durationValue: (json['duration_value'] as num?)?.toInt() ?? 0,
  beforeUseFunctionIdList:
      (json['before_use_function_id_list'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [],
  beforeHurtFunctionIdList:
      (json['before_hurt_function_id_list'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [],
  afterUseFunctionIdList:
      (json['after_use_function_id_list'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [],
  afterHurtFunctionIdList:
      (json['after_hurt_function_id_list'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [],
  resourceName: json['resource_name'] as String? ?? '',
  icon: json['icon'] as String? ?? '',
  shakeId: (json['shake_id'] as num?)?.toInt() ?? 0,
);

Map<String, dynamic> _$SkillDataToJson(SkillData instance) => <String, dynamic>{
  'id': instance.id,
  'skill_cooltime': instance.skillCooltime,
  'attack_type': _$AttackTypeEnumMap[instance.attackType]!,
  'counter_type': instance.counterType,
  'prefer_target': _$PreferTargetEnumMap[instance.preferTarget]!,
  'prefer_target_condition': _$PreferTargetConditionEnumMap[instance.preferTargetCondition]!,
  'skill_type': _$CharacterSkillTypeEnumMap[instance.skillType]!,
  'skill_value_data': instance.skillValueData.map((e) => e.toJson()).toList(),
  'duration_type': _$DurationTypeEnumMap[instance.durationType]!,
  'duration_value': instance.durationValue,
  'before_use_function_id_list': instance.beforeUseFunctionIdList,
  'before_hurt_function_id_list': instance.beforeHurtFunctionIdList,
  'after_use_function_id_list': instance.afterUseFunctionIdList,
  'after_hurt_function_id_list': instance.afterHurtFunctionIdList,
  'resource_name': instance.resourceName,
  'icon': instance.icon,
  'shake_id': instance.shakeId,
};

const _$AttackTypeEnumMap = {
  AttackType.fire: 'Fire',
  AttackType.water: 'Water',
  AttackType.electronic: 'Electronic',
  AttackType.iron: 'Iron',
  AttackType.wind: 'Wind',
  AttackType.energy: 'Energy',
  AttackType.bio: 'Bio',
  AttackType.metal: 'Metal',
  AttackType.unknown: 'Unknown',
};

const _$PreferTargetEnumMap = {
  PreferTarget.unknown: 'Unknown',
  PreferTarget.targetAR: 'TargetAR',
  PreferTarget.targetGL: 'TargetGL',
  PreferTarget.targetPS: 'TargetPS',
  PreferTarget.random: 'Random',
  PreferTarget.back: 'Back',
  PreferTarget.front: 'Front',
  PreferTarget.haveDebuff: 'HaveDebuff',
  PreferTarget.longInitChargeTime: 'LongInitChargeTime',
  PreferTarget.highAttack: 'HighAttack',
  PreferTarget.highAttackFirstSelf: 'HighAttackFirstSelf',
  PreferTarget.highAttackLastSelf: 'HighAttackLastSelf',
  PreferTarget.highDefence: 'HighDefence',
  PreferTarget.highHP: 'HighHP',
  PreferTarget.highMaxHP: 'HighMaxHP',
  PreferTarget.lowDefence: 'LowDefence',
  PreferTarget.lowHP: 'LowHP',
  PreferTarget.lowHPCover: 'LowHPCover',
  PreferTarget.lowHPLastSelf: 'LowHPLastSelf',
  PreferTarget.lowHPRatio: 'LowHPRatio',
  PreferTarget.nearAim: 'NearAim',
  PreferTarget.attacker: 'Attacker',
  PreferTarget.defender: 'Defender',
  PreferTarget.supporter: 'Supporter',
  PreferTarget.fire: 'Fire',
  PreferTarget.water: 'Water',
  PreferTarget.electronic: 'Electronic',
  PreferTarget.iron: 'Iron',
  PreferTarget.wind: 'Wind',
};

const _$PreferTargetConditionEnumMap = {
  PreferTargetCondition.unknown: 'Unknown',
  PreferTargetCondition.none: 'None',
  PreferTargetCondition.includeNoneTargetLast: 'IncludeNoneTargetLast',
  PreferTargetCondition.includeNoneTargetNone: 'IncludeNoneTargetNone',
  PreferTargetCondition.excludeSelf: 'ExcludeSelf',
  PreferTargetCondition.destroyCover: 'DestroyCover',
  PreferTargetCondition.onlySG: 'OnlySG',
  PreferTargetCondition.onlyRL: 'OnlyRL',
  PreferTargetCondition.onlyAR: 'OnlyAR',
};

const _$CharacterSkillTypeEnumMap = {
  CharacterSkillType.setBuff: 'SetBuff',
  CharacterSkillType.instantAll: 'InstantAll',
  CharacterSkillType.instantArea: 'InstantArea',
  CharacterSkillType.instantCircle: 'InstantCircle',
  CharacterSkillType.instantCircleSeparate: 'InstantCircleSeparate',
  CharacterSkillType.instantNumber: 'InstantNumber',
  CharacterSkillType.instantSequentialAttack: 'InstantSequentialAttack',
  CharacterSkillType.installBarrier: 'InstallBarrier',
  CharacterSkillType.installDecoy: 'InstallDecoy',
  CharacterSkillType.changeWeapon: 'ChangeWeapon',
  CharacterSkillType.launchWeapon: 'LaunchWeapon',
  CharacterSkillType.laserBeam: 'LaserBeam',
  CharacterSkillType.explosiveCircuit: 'ExplosiveCircuit',
  CharacterSkillType.stigma: 'Stigma',
  CharacterSkillType.hitMonsterGetBuff: 'HitMonsterGetBuff',
  CharacterSkillType.unknown: 'Unknown',
};

const _$DurationTypeEnumMap = {
  DurationType.none: 'None',
  DurationType.timeSec: 'TimeSec',
  DurationType.shots: 'Shots',
  DurationType.battles: 'Battles',
  DurationType.hits: 'Hits',
  DurationType.timeSecBattles: 'TimeSecBattles',
  DurationType.unknown: 'Unknown',
};

SkillFunction _$SkillFunctionFromJson(Map<String, dynamic> json) =>
    SkillFunction(function: (json['function'] as num?)?.toInt() ?? 0);

Map<String, dynamic> _$SkillFunctionToJson(SkillFunction instance) => <String, dynamic>{'function': instance.function};

StateEffectData _$StateEffectDataFromJson(Map<String, dynamic> json) => StateEffectData(
  id: (json['id'] as num?)?.toInt() ?? 0,
  useFunctionIdList:
      (json['use_function_id_list'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [],
  hurtFunctionIdList:
      (json['hurt_function_id_list'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [],
  functions:
      (json['functions'] as List<dynamic>?)?.map((e) => SkillFunction.fromJson(e as Map<String, dynamic>)).toList() ??
      const [],
  icon: json['icon'] as String? ?? '',
);

Map<String, dynamic> _$StateEffectDataToJson(StateEffectData instance) => <String, dynamic>{
  'id': instance.id,
  'use_function_id_list': instance.useFunctionIdList,
  'hurt_function_id_list': instance.hurtFunctionIdList,
  'functions': instance.functions.map((e) => e.toJson()).toList(),
  'icon': instance.icon,
};

FunctionData _$FunctionDataFromJson(Map<String, dynamic> json) => FunctionData(
  id: (json['id'] as num?)?.toInt() ?? 0,
  groupId: (json['group_id'] as num?)?.toInt() ?? 0,
  level: (json['level'] as num?)?.toInt() ?? 0,
  nameLocalkey: json['name_localkey'] as String? ?? '',
  buff: $enumDecodeNullable(_$BuffTypeEnumMap, json['buff']) ?? BuffType.unknown,
  buffRemove: $enumDecodeNullable(_$BuffRemoveTypeEnumMap, json['buff_remove']) ?? BuffRemoveType.unknown,
  functionType: $enumDecodeNullable(_$FunctionTypeEnumMap, json['function_type']) ?? FunctionType.unknown,
  functionValueType: $enumDecodeNullable(_$ValueTypeEnumMap, json['function_value_type']) ?? ValueType.unknown,
  functionStandard: $enumDecodeNullable(_$StandardTypeEnumMap, json['function_standard']) ?? StandardType.unknown,
  functionValue: (json['function_value'] as num?)?.toInt() ?? 0,
  fullCount: (json['full_count'] as num?)?.toInt() ?? 0,
  isCancel: json['is_cancel'] as bool? ?? false,
  delayType: $enumDecodeNullable(_$DurationTypeEnumMap, json['delay_type']) ?? DurationType.unknown,
  delayValue: (json['delay_value'] as num?)?.toInt() ?? 0,
  durationType: $enumDecodeNullable(_$DurationTypeEnumMap, json['duration_type']) ?? DurationType.unknown,
  durationValue: (json['duration_value'] as num?)?.toInt() ?? 0,
  limitValue: (json['limit_value'] as num?)?.toInt() ?? 0,
  functionTarget:
      $enumDecodeNullable(_$FunctionTargetTypeEnumMap, json['function_target']) ?? FunctionTargetType.unknown,
  timingTriggerType:
      $enumDecodeNullable(_$TimingTriggerTypeEnumMap, json['timing_trigger_type']) ?? TimingTriggerType.unknown,
  timingTriggerStandard:
      $enumDecodeNullable(_$StandardTypeEnumMap, json['timing_trigger_standard']) ?? StandardType.unknown,
  timingTriggerValue: (json['timing_trigger_value'] as num?)?.toInt() ?? 0,
  statusTriggerType:
      $enumDecodeNullable(_$StatusTriggerTypeEnumMap, json['status_trigger_type']) ?? StatusTriggerType.unknown,
  statusTriggerStandard:
      $enumDecodeNullable(_$StandardTypeEnumMap, json['status_trigger_standard']) ?? StandardType.unknown,
  statusTriggerValue: (json['status_trigger_value'] as num?)?.toInt() ?? 0,
  statusTrigger2Type:
      $enumDecodeNullable(_$StatusTriggerTypeEnumMap, json['status_trigger2_type']) ?? StatusTriggerType.unknown,
  statusTrigger2Standard:
      $enumDecodeNullable(_$StandardTypeEnumMap, json['status_trigger2_standard']) ?? StandardType.unknown,
  statusTrigger2Value: (json['status_trigger2_value'] as num?)?.toInt() ?? 0,
  keepingType: $enumDecodeNullable(_$FunctionStatusEnumMap, json['keeping_type']) ?? FunctionStatus.off,
  buffIcon: json['buff_icon'] as String? ?? '',
  shotFxListType: json['shot_fx_list_type'] as String? ?? '',
  fxPrefab01: json['fx_prefab_01'] as String? ?? '',
  fxTarget01: json['fx_target_01'] as String? ?? '',
  fxSocketPoint01: json['fx_socket_point_01'] as String? ?? '',
  fxPrefab02: json['fx_prefab_02'] as String? ?? '',
  fxTarget02: json['fx_target_02'] as String? ?? '',
  fxSocketPoint02: json['fx_socket_point_02'] as String? ?? '',
  fxPrefab03: json['fx_prefab_03'] as String? ?? '',
  fxTarget03: json['fx_target_03'] as String? ?? '',
  fxSocketPoint03: json['fx_socket_point_03'] as String? ?? '',
  fxPrefabFull: json['fx_prefab_full'] as String? ?? '',
  fxTargetFull: json['fx_target_full'] as String? ?? '',
  fxSocketPointFull: json['fx_socket_point_full'] as String? ?? '',
  fxPrefab01Arena: json['fx_prefab_01_arena'] as String? ?? '',
  fxTarget01Arena: json['fx_target_01_arena'] as String? ?? '',
  fxSocketPoint01Arena: json['fx_socket_point_01_arena'] as String? ?? '',
  fxPrefab02Arena: json['fx_prefab_02_arena'] as String? ?? '',
  fxTarget02Arena: json['fx_target_02_arena'] as String? ?? '',
  fxSocketPoint02Arena: json['fx_socket_point_02_arena'] as String? ?? '',
  fxPrefab03Arena: json['fx_prefab_03_arena'] as String? ?? '',
  fxTarget03Arena: json['fx_target_03_arena'] as String? ?? '',
  fxSocketPoint03Arena: json['fx_socket_point_03_arena'] as String? ?? '',
  connectedFunction:
      (json['connected_function'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [],
);

Map<String, dynamic> _$FunctionDataToJson(FunctionData instance) => <String, dynamic>{
  'id': instance.id,
  'group_id': instance.groupId,
  'level': instance.level,
  'name_localkey': instance.nameLocalkey,
  'buff': _$BuffTypeEnumMap[instance.buff]!,
  'buff_remove': _$BuffRemoveTypeEnumMap[instance.buffRemove]!,
  'function_type': _$FunctionTypeEnumMap[instance.functionType]!,
  'function_value_type': _$ValueTypeEnumMap[instance.functionValueType]!,
  'function_standard': _$StandardTypeEnumMap[instance.functionStandard]!,
  'function_value': instance.functionValue,
  'full_count': instance.fullCount,
  'is_cancel': instance.isCancel,
  'delay_type': _$DurationTypeEnumMap[instance.delayType]!,
  'delay_value': instance.delayValue,
  'duration_type': _$DurationTypeEnumMap[instance.durationType]!,
  'duration_value': instance.durationValue,
  'limit_value': instance.limitValue,
  'function_target': _$FunctionTargetTypeEnumMap[instance.functionTarget]!,
  'timing_trigger_type': _$TimingTriggerTypeEnumMap[instance.timingTriggerType]!,
  'timing_trigger_standard': _$StandardTypeEnumMap[instance.timingTriggerStandard]!,
  'timing_trigger_value': instance.timingTriggerValue,
  'status_trigger_type': _$StatusTriggerTypeEnumMap[instance.statusTriggerType]!,
  'status_trigger_standard': _$StandardTypeEnumMap[instance.statusTriggerStandard]!,
  'status_trigger_value': instance.statusTriggerValue,
  'status_trigger2_type': _$StatusTriggerTypeEnumMap[instance.statusTrigger2Type]!,
  'status_trigger2_standard': _$StandardTypeEnumMap[instance.statusTrigger2Standard]!,
  'status_trigger2_value': instance.statusTrigger2Value,
  'keeping_type': _$FunctionStatusEnumMap[instance.keepingType]!,
  'buff_icon': instance.buffIcon,
  'shot_fx_list_type': instance.shotFxListType,
  'fx_prefab_01': instance.fxPrefab01,
  'fx_target_01': instance.fxTarget01,
  'fx_socket_point_01': instance.fxSocketPoint01,
  'fx_prefab_02': instance.fxPrefab02,
  'fx_target_02': instance.fxTarget02,
  'fx_socket_point_02': instance.fxSocketPoint02,
  'fx_prefab_03': instance.fxPrefab03,
  'fx_target_03': instance.fxTarget03,
  'fx_socket_point_03': instance.fxSocketPoint03,
  'fx_prefab_full': instance.fxPrefabFull,
  'fx_target_full': instance.fxTargetFull,
  'fx_socket_point_full': instance.fxSocketPointFull,
  'fx_prefab_01_arena': instance.fxPrefab01Arena,
  'fx_target_01_arena': instance.fxTarget01Arena,
  'fx_socket_point_01_arena': instance.fxSocketPoint01Arena,
  'fx_prefab_02_arena': instance.fxPrefab02Arena,
  'fx_target_02_arena': instance.fxTarget02Arena,
  'fx_socket_point_02_arena': instance.fxSocketPoint02Arena,
  'fx_prefab_03_arena': instance.fxPrefab03Arena,
  'fx_target_03_arena': instance.fxTarget03Arena,
  'fx_socket_point_03_arena': instance.fxSocketPoint03Arena,
  'connected_function': instance.connectedFunction,
};

const _$BuffTypeEnumMap = {
  BuffType.etc: 'Etc',
  BuffType.buff: 'Buff',
  BuffType.buffEtc: 'BuffEtc',
  BuffType.deBuff: 'DeBuff',
  BuffType.deBuffEtc: 'DebuffEtc',
  BuffType.unknown: 'Unknown',
};

const _$BuffRemoveTypeEnumMap = {
  BuffRemoveType.etc: 'Etc',
  BuffRemoveType.clear: 'Clear',
  BuffRemoveType.resist: 'Resist',
  BuffRemoveType.unknown: 'Unknown',
};

const _$FunctionTypeEnumMap = {
  FunctionType.unknown: 'Unknown',
  FunctionType.addDamage: 'AddDamage',
  FunctionType.addIncElementDmgType: 'AddIncElementDmgType',
  FunctionType.allAmmo: 'AllAmmo',
  FunctionType.allStepBurstNextStep: 'AllStepBurstNextStep',
  FunctionType.atkBuffChange: 'AtkBuffChange',
  FunctionType.atkChangHpRate: 'AtkChangHpRate',
  FunctionType.atkChangeMaxHpRate: 'AtkChangeMaxHpRate',
  FunctionType.atkReplaceMaxHpRate: 'AtkReplaceMaxHpRate',
  FunctionType.attention: 'Attention',
  FunctionType.barrierDamage: 'BarrierDamage',
  FunctionType.bonusRangeDamageChange: 'BonusRangeDamageChange',
  FunctionType.breakDamage: 'BreakDamage',
  FunctionType.buffRemove: 'BuffRemove',
  FunctionType.burstGaugeCharge: 'BurstGaugeCharge',
  FunctionType.callingMonster: 'CallingMonster',
  FunctionType.changeChangeBurstStep: 'ChangeChangeBurstStep',
  FunctionType.changeCoolTimeAll: 'ChangeCoolTimeAll',
  FunctionType.changeCoolTimeSkill1: 'ChangeCoolTimeSkill1',
  FunctionType.changeCoolTimeSkill2: 'ChangeCoolTimeSkill2',
  FunctionType.changeCoolTimeUlti: 'ChangeCoolTimeUlti',
  FunctionType.changeCurrentHpValue: 'ChangeCurrentHpValue',
  FunctionType.changeMaxSkillCoolTime2: 'ChangeMaxSkillCoolTime2',
  FunctionType.changeMaxSkillCoolTimeUlti: 'ChangeMaxSkillCoolTimeUlti',
  FunctionType.changeNormalDefIgnoreDamage: 'ChangeNormalDefIgnoreDamage',
  FunctionType.chargeDamageChangeMaxStatAmmo: 'ChargeDamageChangeMaxStatAmmo',
  FunctionType.chargeTimeChangetoDamage: 'ChargeTimeChangetoDamage',
  FunctionType.changeUseBurstSkill: 'ChangeUseBurstSkill',
  FunctionType.copyAtk: 'CopyAtk',
  FunctionType.copyHp: 'CopyHp',
  FunctionType.coreShotDamageChange: 'CoreShotDamageChange',
  FunctionType.coverResurrection: 'CoverResurrection',
  FunctionType.currentHpRatioDamage: 'CurrentHpRatioDamage',
  FunctionType.cycleUse: 'CycleUse',
  FunctionType.damage: 'Damage',
  FunctionType.damageBio: 'DamageBio',
  FunctionType.damageEnergy: 'DamageEnergy',
  FunctionType.damageFunctionTargetGroupId: 'DamageFunctionTargetGroupId',
  FunctionType.damageFunctionUnable: 'DamageFunctionUnable',
  FunctionType.damageFunctionValueChange: 'DamageFunctionValueChange',
  FunctionType.damageMetal: 'DamageMetal',
  FunctionType.damageRatioEnergy: 'DamageRatioEnergy',
  FunctionType.damageRatioMetal: 'DamageRatioMetal',
  FunctionType.damageReduction: 'DamageReduction',
  FunctionType.damageShare: 'DamageShare',
  FunctionType.damageShareInstant: 'DamageShareInstant',
  FunctionType.damageShareInstantUnable: 'DamageShareInstantUnable',
  FunctionType.debuffImmune: 'DebuffImmune',
  FunctionType.debuffRemove: 'DebuffRemove',
  FunctionType.defChangHpRate: 'DefChangHpRate',
  FunctionType.defIgnoreDamage: 'DefIgnoreDamage',
  FunctionType.defIgnoreDamageRatio: 'DefIgnoreDamageRatio',
  FunctionType.drainHpBuff: 'DrainHpBuff',
  FunctionType.durationDamageRatio: 'DurationDamageRatio',
  FunctionType.durationValueChange: 'DurationValueChange',
  FunctionType.explosiveCircuitAccrueDamageRatio: 'ExplosiveCircuitAccrueDamageRatio',
  FunctionType.finalStatHpHeal: 'FinalStatHpHeal',
  FunctionType.firstBurstGaugeSpeedUp: 'FirstBurstGaugeSpeedUp',
  FunctionType.fixStatReloadTime: 'FixStatReloadTime',
  FunctionType.forcedStop: 'ForcedStop',
  FunctionType.fullChargeHitDamageRepeat: 'FullChargeHitDamageRepeat',
  FunctionType.fullCountDamageRatio: 'FullCountDamageRatio',
  FunctionType.functionOverlapChange: 'FunctionOverlapChange',
  FunctionType.gainAmmo: 'GainAmmo',
  FunctionType.gainUltiGauge: 'GainUltiGauge',
  FunctionType.givingHealVariation: 'GivingHealVariation',
  FunctionType.gravityBomb: 'GravityBomb',
  FunctionType.healBarrier: 'HealBarrier',
  FunctionType.healCharacter: 'HealCharacter',
  FunctionType.healCover: 'HealCover',
  FunctionType.healDecoy: 'HealDecoy',
  FunctionType.healShare: 'HealShare',
  FunctionType.healVariation: 'HealVariation',
  FunctionType.hide: 'Hide',
  FunctionType.hpProportionDamage: 'HpProportionDamage',
  FunctionType.immuneAttention: 'ImmuneAttention',
  FunctionType.immuneBio: 'ImmuneBio',
  FunctionType.immuneChangeCoolTimeUlti: 'ImmuneChangeCoolTimeUlti',
  FunctionType.immuneDamage: 'ImmuneDamage',
  FunctionType.immuneDamageMainHp: 'ImmuneDamage_MainHP',
  FunctionType.immuneEnergy: 'ImmuneEnergy',
  FunctionType.immuneForcedStop: 'ImmuneForcedStop',
  FunctionType.immuneGravityBomb: 'ImmuneGravityBomb',
  FunctionType.immuneInstantDeath: 'ImmuneInstantDeath',
  FunctionType.immuneInstallBarrier: 'ImmuneInstallBarrier',
  FunctionType.immuneMetal: 'ImmuneMetal',
  FunctionType.immuneOtherElement: 'ImmuneOtherElement',
  FunctionType.immuneStun: 'ImmuneStun',
  FunctionType.immuneTaunt: 'ImmuneTaunt',
  FunctionType.immortal: 'Immortal',
  FunctionType.incBarrierHp: 'IncBarrierHp',
  FunctionType.incBurstDuration: 'IncBurstDuration',
  FunctionType.incElementDmg: 'IncElementDmg',
  FunctionType.infection: 'Infection',
  FunctionType.instantAllBurstDamage: 'InstantAllBurstDamage',
  FunctionType.instantDeath: 'InstantDeath',
  FunctionType.linkAtk: 'LinkAtk',
  FunctionType.linkDef: 'LinkDef',
  FunctionType.none: 'None',
  FunctionType.normalDamageRatioChange: 'NormalDamageRatioChange',
  FunctionType.normalStatCritical: 'NormalStatCritical',
  FunctionType.outBonusRangeDamageChange: 'OutBonusRangeDamageChange',
  FunctionType.overHealSave: 'OverHealSave',
  FunctionType.partsDamage: 'PartsDamage',
  FunctionType.partsHpChangeUIOff: 'PartsHpChangeUIOff',
  FunctionType.partsHpChangeUIOn: 'PartsHpChangeUIOn',
  FunctionType.partsImmuneDamage: 'PartsImmuneDamage',
  FunctionType.penetrationDamage: 'PenetrationDamage',
  FunctionType.plusDebuffCount: 'PlusDebuffCount',
  FunctionType.plusInstantSkillTargetNum: 'PlusInstantSkillTargetNum',
  FunctionType.projectileDamage: 'ProjectileDamage',
  FunctionType.projectileExplosionDamage: 'ProjectileExplosionDamage',
  FunctionType.removeFunctionGroup: 'RemoveFunctionGroup',
  FunctionType.repeatUseBurstStep: 'RepeatUseBurstStep',
  FunctionType.resurrection: 'Resurrection',
  FunctionType.shareDamageIncrease: 'ShareDamageIncrease',
  FunctionType.silence: 'Silence',
  FunctionType.singleBurstDamage: 'SingleBurstDamage',
  FunctionType.statAccuracyCircle: 'StatAccuracyCircle',
  FunctionType.statAmmo: 'StatAmmo',
  FunctionType.statAmmoLoad: 'StatAmmoLoad',
  FunctionType.statAtk: 'StatAtk',
  FunctionType.statBioResist: 'StatBioResist',
  FunctionType.statBonusRangeMax: 'StatBonusRangeMax',
  FunctionType.statBurstSkillCoolTime: 'StatBurstSkillCoolTime',
  FunctionType.statChargeDamage: 'StatChargeDamage',
  FunctionType.statChargeTime: 'StatChargeTime',
  FunctionType.statChargeTimeImmune: 'StatChargeTimeImmune',
  FunctionType.statCritical: 'StatCritical',
  FunctionType.statCriticalDamage: 'StatCriticalDamage',
  FunctionType.statDef: 'StatDef',
  FunctionType.statEndRateOfFire: 'StatEndRateOfFire',
  FunctionType.statEnergyResist: 'StatEnergyResist',
  FunctionType.statExplosion: 'StatExplosion',
  FunctionType.statHp: 'StatHp',
  FunctionType.statHpHeal: 'StatHpHeal',
  FunctionType.statInstantSkillRange: 'StatInstantSkillRange',
  FunctionType.statMaintainFireStance: 'StatMaintainFireStance',
  FunctionType.statPenetration: 'StatPenetration',
  FunctionType.statRateOfFire: 'StatRateOfFire',
  FunctionType.statRateOfFirePerShot: 'StatRateOfFirePerShot',
  FunctionType.statReloadBulletRatio: 'StatReloadBulletRatio',
  FunctionType.statReloadTime: 'StatReloadTime',
  FunctionType.statShotCount: 'StatShotCount',
  FunctionType.statSpotRadius: 'StatSpotRadius',
  FunctionType.stickyProjectileCollisionDamage: 'StickyProjectileCollisionDamage',
  FunctionType.stickyProjectileExplosion: 'StickyProjectileExplosion',
  FunctionType.stickyProjectileInstantExplosion: 'StickyProjectileInstantExplosion',
  FunctionType.stun: 'Stun',
  FunctionType.taunt: 'Taunt',
  FunctionType.targetGroupid: 'TargetGroupid',
  FunctionType.targetPartsId: 'TargetPartsId',
  FunctionType.timingTriggerValueChange: 'TimingTriggerValueChange',
  FunctionType.transformation: 'Transformation',
  FunctionType.uncoverable: 'Uncoverable',
  FunctionType.useCharacterSkillId: 'UseCharacterSkillId',
  FunctionType.useSkill2: 'UseSkill2',
  FunctionType.windReduction: 'WindReduction',
};

const _$StandardTypeEnumMap = {
  StandardType.unknown: 'Unknown',
  StandardType.none: 'None',
  StandardType.user: 'User',
  StandardType.functionTarget: 'FunctionTarget',
  StandardType.triggerTarget: 'TriggerTarget',
};

const _$FunctionTargetTypeEnumMap = {
  FunctionTargetType.unknown: 'Unknown',
  FunctionTargetType.none: 'None',
  FunctionTargetType.self: 'Self',
  FunctionTargetType.target: 'Target',
  FunctionTargetType.targetCover: 'TargetCover',
  FunctionTargetType.allCharacter: 'AllCharacter',
  FunctionTargetType.allMonster: 'AllMonster',
  FunctionTargetType.userCover: 'UserCover',
};

const _$TimingTriggerTypeEnumMap = {
  TimingTriggerType.unknown: 'Unknown',
  TimingTriggerType.none: 'None',
  TimingTriggerType.onAmmoRatioUnder: 'OnAmmoRatioUnder',
  TimingTriggerType.onBurstSkillStep: 'OnBurstSkillStep',
  TimingTriggerType.onBurstSkillUseNum: 'OnBurstSkillUseNum',
  TimingTriggerType.onCheckTime: 'OnCheckTime',
  TimingTriggerType.onCoreHitNum: 'OnCoreHitNum',
  TimingTriggerType.onCoreHitNumOnce: 'OnCoreHitNumOnce',
  TimingTriggerType.onCoreHitRatio: 'OnCoreHitRatio',
  TimingTriggerType.onCoverHurtRatio: 'OnCoverHurtRatio',
  TimingTriggerType.onCriticalHitNum: 'OnCriticalHitNum',
  TimingTriggerType.onDead: 'OnDead',
  TimingTriggerType.onEndFullBurst: 'OnEndFullBurst',
  TimingTriggerType.onEndReload: 'OnEndReload',
  TimingTriggerType.onEnterBurstStep: 'OnEnterBurstStep',
  TimingTriggerType.onFullCharge: 'OnFullCharge',
  TimingTriggerType.onFullChargeHit: 'OnFullChargeHit',
  TimingTriggerType.onFullChargeHitNum: 'OnFullChargeHitNum',
  TimingTriggerType.onFullChargeNum: 'OnFullChargeNum',
  TimingTriggerType.onFullChargeShot: 'OnFullChargeShot',
  TimingTriggerType.onFullChargeShotNum: 'OnFullChargeShotNum',
  TimingTriggerType.onFullCount: 'OnFullCount',
  TimingTriggerType.onFunctionBuffCheck: 'OnFunctionBuffCheck',
  TimingTriggerType.onFunctionOff: 'OnFunctionOff',
  TimingTriggerType.onFunctionOn: 'OnFunctionOn',
  TimingTriggerType.onHealCover: 'OnHealCover',
  TimingTriggerType.onHealedBy: 'OnHealedBy',
  TimingTriggerType.onHitNum: 'OnHitNum',
  TimingTriggerType.onHitNumExceptCore: 'OnHitNumExceptCore',
  TimingTriggerType.onHitNumberOver: 'OnHitNumberOver',
  TimingTriggerType.onHitRatio: 'OnHitRatio',
  TimingTriggerType.onHpRatioUnder: 'OnHpRatioUnder',
  TimingTriggerType.onHpRatioUp: 'OnHpRatioUp',
  TimingTriggerType.onHurtCount: 'OnHurtCount',
  TimingTriggerType.onHurtRatio: 'OnHurtRatio',
  TimingTriggerType.onInstallBarrier: 'OnInstallBarrier',
  TimingTriggerType.onInstantDeath: 'OnInstantDeath',
  TimingTriggerType.onKeepFullcharge: 'OnKeepFullcharge',
  TimingTriggerType.onKillRatio: 'OnKillRatio',
  TimingTriggerType.onLastAmmoUse: 'OnLastAmmoUse',
  TimingTriggerType.onLastShotHit: 'OnLastShotHit',
  TimingTriggerType.onNikkeDead: 'OnNikkeDead',
  TimingTriggerType.onPartsBrokenNum: 'OnPartsBrokenNum',
  TimingTriggerType.onPartsHitNum: 'OnPartsHitNum',
  TimingTriggerType.onPartsHitRatio: 'OnPartsHitRatio',
  TimingTriggerType.onPartsHurtCount: 'OnPartsHurtCount',
  TimingTriggerType.onPelletHitNum: 'OnPelletHitNum',
  TimingTriggerType.onPelletHitPerShot: 'OnPelletHitPerShot',
  TimingTriggerType.onResurrection: 'OnResurrection',
  TimingTriggerType.onShotNotFullCharge: 'OnShotNotFullCharge',
  TimingTriggerType.onShotRatio: 'OnShotRatio',
  TimingTriggerType.onSkillUse: 'OnSkillUse',
  TimingTriggerType.onSpawnMonster: 'OnSpawnMonster',
  TimingTriggerType.onSpawnTarget: 'OnSpawnTarget',
  TimingTriggerType.onSquadHurtRatio: 'OnSquadHurtRatio',
  TimingTriggerType.onStart: 'OnStart',
  TimingTriggerType.onSummonMonster: 'OnSummonMonster',
  TimingTriggerType.onTeamHpRatioUnder: 'OnTeamHpRatioUnder',
  TimingTriggerType.onTeamHpRatioUp: 'OnTeamHpRatioUp',
  TimingTriggerType.onUseAmmo: 'OnUseAmmo',
  TimingTriggerType.onUseBurstSkill: 'OnUseBurstSkill',
  TimingTriggerType.onUserPartsDestroy: 'OnUserPartsDestroy',
};

const _$StatusTriggerTypeEnumMap = {
  StatusTriggerType.unknown: 'Unknown',
  StatusTriggerType.none: 'None',
  StatusTriggerType.isAlive: 'IsAlive',
  StatusTriggerType.isAmmoCount: 'IsAmmoCount',
  StatusTriggerType.isBurstMember: 'IsBurstMember',
  StatusTriggerType.isBurstStepState: 'IsBurstStepState',
  StatusTriggerType.isCharacter: 'IsCharacter',
  StatusTriggerType.isCheckFunctionOverlapUp: 'IsCheckFunctionOverlapUp',
  StatusTriggerType.isCheckMonster: 'IsCheckMonster',
  StatusTriggerType.isCheckMonsterType: 'IsCheckMonsterType',
  StatusTriggerType.isCheckPartsId: 'IsCheckPartsId',
  StatusTriggerType.isCheckPosition: 'IsCheckPosition',
  StatusTriggerType.isCheckTarget: 'IsCheckTarget',
  StatusTriggerType.isCheckTeamBurstNextStep: 'IsCheckTeamBurstNextStep',
  StatusTriggerType.isClassType: 'IsClassType',
  StatusTriggerType.isCover: 'IsCover',
  StatusTriggerType.isExplosiveCircuitOff: 'IsExplosiveCircuitOff',
  StatusTriggerType.isFullCharge: 'IsFullCharge',
  StatusTriggerType.isFullCount: 'IsFullCount',
  StatusTriggerType.isFunctionBuffCheck: 'IsFunctionBuffCheck',
  StatusTriggerType.isFunctionOff: 'IsFunctionOff',
  StatusTriggerType.isFunctionOn: 'IsFunctionOn',
  StatusTriggerType.isFunctionTypeOffCheck: 'IsFunctionTypeOffCheck',
  StatusTriggerType.isHaveBarrier: 'IsHaveBarrier',
  StatusTriggerType.isHaveDecoy: 'IsHaveDecoy',
  StatusTriggerType.isHpRatioUnder: 'IsHpRatioUnder',
  StatusTriggerType.isHpRatioUp: 'IsHpRatioUp',
  StatusTriggerType.isNotBurstMember: 'IsNotBurstMember',
  StatusTriggerType.isNotCheckTeamBurstNextStep: 'IsNotCheckTeamBurstNextStep',
  StatusTriggerType.isNotHaveBarrier: 'IsNotHaveBarrier',
  StatusTriggerType.isPhase: 'isPhase',
  StatusTriggerType.isSameSquadCount: 'IsSameSqaudCount',
  StatusTriggerType.isSameSquadUp: 'IsSameSqaudUp',
  StatusTriggerType.isSearchElementId: 'IsSearchElementId',
  StatusTriggerType.isStun: 'IsStun',
  StatusTriggerType.isWeaponType: 'IsWeaponType',
};

const _$FunctionStatusEnumMap = {FunctionStatus.on: 'On', FunctionStatus.off: 'Off'};

SkillDescriptionValue _$SkillDescriptionValueFromJson(Map<String, dynamic> json) =>
    SkillDescriptionValue(value: json['description_value'] as String?);

Map<String, dynamic> _$SkillDescriptionValueToJson(SkillDescriptionValue instance) => <String, dynamic>{
  'description_value': instance.value,
};

SkillInfoData _$SkillInfoDataFromJson(Map<String, dynamic> json) => SkillInfoData(
  id: (json['id'] as num?)?.toInt() ?? 0,
  groupId: (json['group_id'] as num?)?.toInt() ?? 0,
  skillLevel: (json['skill_level'] as num?)?.toInt() ?? 0,
  nextLevelId: (json['next_level_id'] as num?)?.toInt() ?? 0,
  levelUpCostId: (json['level_up_cost_id'] as num?)?.toInt() ?? 0,
  icon: json['icon'] as String? ?? '',
  nameLocalkey: json['name_localkey'] as String? ?? '',
  descriptionLocalkey: json['description_localkey'] as String? ?? '',
  infoDescriptionLocalkey: json['info_description_localkey'] as String? ?? '',
  descriptionValues:
      (json['description_value_list'] as List<dynamic>?)
          ?.map((e) => SkillDescriptionValue.fromJson(e as Map<String, dynamic>))
          .toList() ??
      const [],
);

Map<String, dynamic> _$SkillInfoDataToJson(SkillInfoData instance) => <String, dynamic>{
  'id': instance.id,
  'group_id': instance.groupId,
  'skill_level': instance.skillLevel,
  'next_level_id': instance.nextLevelId,
  'level_up_cost_id': instance.levelUpCostId,
  'icon': instance.icon,
  'name_localkey': instance.nameLocalkey,
  'description_localkey': instance.descriptionLocalkey,
  'info_description_localkey': instance.infoDescriptionLocalkey,
  'description_value_list': instance.descriptionValues.map((e) => e.toJson()).toList(),
};
