// GENERATED CODE - DO NOT MODIFY BY HAND

part of '../../../model/battle/rapture.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

BattleRaptureOptions _$BattleRaptureOptionsFromJson(Map<String, dynamic> json) => BattleRaptureOptions(
  monsterId: (json['monsterId'] as num?)?.toInt(),
  level: (json['level'] as num?)?.toInt(),
  name: json['name'] as String? ?? "Rapture",
  isStageTarget: json['isStageTarget'] as bool? ?? true,
  canBeTargeted: json['canBeTargeted'] as bool? ?? true,
  coreSize: (json['coreSize'] as num?)?.toInt() ?? 10,
  startDistance: (json['startDistance'] as num?)?.toInt() ?? 25,
  startHp: (json['startHp'] as num?)?.toInt() ?? 1,
  startAttack: (json['startAttack'] as num?)?.toInt() ?? 1,
  startDefence: (json['startDefence'] as num?)?.toInt() ?? 140,
  damageRatio: (json['damageRatio'] as num?)?.toInt() ?? 10000,
  projectileHp: (json['projectileHp'] as num?)?.toInt() ?? 1,
  brokenHp: (json['brokenHp'] as num?)?.toInt() ?? 1,
  element: $enumDecodeNullable(_$NikkeElementEnumMap, json['element']) ?? NikkeElement.unknown,
  actions:
      (json['actions'] as Map<String, dynamic>?)?.map(
        (k, e) => MapEntry(
          int.parse(k),
          (e as List<dynamic>).map((e) => BattleRaptureAction.fromJson(e as Map<String, dynamic>)).toList(),
        ),
      ) ??
      const {},
  parts:
      (json['parts'] as Map<String, dynamic>?)?.map(
        (k, e) => MapEntry(int.parse(k), BattleRaptureParts.fromJson(e as Map<String, dynamic>)),
      ) ??
      const {},
);

Map<String, dynamic> _$BattleRaptureOptionsToJson(BattleRaptureOptions instance) => <String, dynamic>{
  'monsterId': instance.monsterId,
  'name': instance.name,
  'element': _$NikkeElementEnumMap[instance.element]!,
  'parts': instance.parts.map((k, e) => MapEntry(k.toString(), e.toJson())),
  'isStageTarget': instance.isStageTarget,
  'canBeTargeted': instance.canBeTargeted,
  'coreSize': instance.coreSize,
  'startDistance': instance.startDistance,
  'level': instance.level,
  'startHp': instance.startHp,
  'startAttack': instance.startAttack,
  'startDefence': instance.startDefence,
  'damageRatio': instance.damageRatio,
  'projectileHp': instance.projectileHp,
  'brokenHp': instance.brokenHp,
  'actions': instance.actions.map((k, e) => MapEntry(k.toString(), e.map((e) => e.toJson()).toList())),
};

const _$NikkeElementEnumMap = {
  NikkeElement.unknown: 'unknown',
  NikkeElement.fire: 'fire',
  NikkeElement.water: 'water',
  NikkeElement.wind: 'wind',
  NikkeElement.electric: 'electric',
  NikkeElement.iron: 'iron',
};

BattleRaptureAction _$BattleRaptureActionFromJson(Map<String, dynamic> json) => BattleRaptureAction(
  type: $enumDecode(_$BattleRaptureActionTypeEnumMap, json['type']),
  frame: (json['frame'] as num).toInt(),
  setParameter: (json['setParameter'] as num?)?.toInt(),
  frameDuration: (json['frameDuration'] as num?)?.toInt(),
  durationType: $enumDecodeNullable(_$DurationTypeEnumMap, json['durationType']),
  eleShields: (json['eleShields'] as List<dynamic>?)?.map((e) => $enumDecode(_$NikkeElementEnumMap, e)).toList(),
  targetType: $enumDecodeNullable(_$BattleRaptureActionTargetEnumMap, json['targetType']),
  targetSubtype: $enumDecodeNullable(_$BattleRaptureActionTargetSubtypeEnumMap, json['targetSubtype']),
  position: (json['position'] as num?)?.toInt(),
  targetCount: (json['targetCount'] as num?)?.toInt(),
  sortHighToLow: json['sortHighToLow'] as bool?,
  buffType: $enumDecodeNullable(_$FunctionTypeEnumMap, json['buffType']),
  isBuff: json['isBuff'] as bool?,
  buffValue: (json['buffValue'] as num?)?.toInt(),
  partId: (json['partId'] as num?)?.toInt(),
  damageRate: (json['damageRate'] as num?)?.toInt(),
  barrierHp: (json['barrierHp'] as num?)?.toInt(),
  hitCover: json['hitCover'] as bool?,
);

Map<String, dynamic> _$BattleRaptureActionToJson(BattleRaptureAction instance) => <String, dynamic>{
  'type': _$BattleRaptureActionTypeEnumMap[instance.type]!,
  'frame': instance.frame,
  'setParameter': instance.setParameter,
  'frameDuration': instance.frameDuration,
  'durationType': _$DurationTypeEnumMap[instance.durationType],
  'eleShields': instance.eleShields?.map((e) => _$NikkeElementEnumMap[e]!).toList(),
  'barrierHp': instance.barrierHp,
  'damageRate': instance.damageRate,
  'hitCover': instance.hitCover,
  'targetType': _$BattleRaptureActionTargetEnumMap[instance.targetType],
  'targetSubtype': _$BattleRaptureActionTargetSubtypeEnumMap[instance.targetSubtype],
  'position': instance.position,
  'targetCount': instance.targetCount,
  'sortHighToLow': instance.sortHighToLow,
  'buffValue': instance.buffValue,
  'buffType': _$FunctionTypeEnumMap[instance.buffType],
  'isBuff': instance.isBuff,
  'partId': instance.partId,
};

const _$BattleRaptureActionTypeEnumMap = {
  BattleRaptureActionType.setAtk: 'setAtk',
  BattleRaptureActionType.setDef: 'setDef',
  BattleRaptureActionType.setDistance: 'setDistance',
  BattleRaptureActionType.setCoreSize: 'setCoreSize',
  BattleRaptureActionType.jump: 'jump',
  BattleRaptureActionType.invincible: 'invincible',
  BattleRaptureActionType.redCircle: 'redCircle',
  BattleRaptureActionType.elementalShield: 'elementalShield',
  BattleRaptureActionType.generateBarrier: 'generateBarrier',
  BattleRaptureActionType.generateParts: 'generateParts',
  BattleRaptureActionType.attack: 'attack',
  BattleRaptureActionType.setBuff: 'setBuff',
  BattleRaptureActionType.clearBuff: 'clearBuff',
  BattleRaptureActionType.jumpEnd: 'jumpEnd',
  BattleRaptureActionType.invincibleEnd: 'invincibleEnd',
  BattleRaptureActionType.redCircleEnd: 'redCircleEnd',
  BattleRaptureActionType.elementalShieldEnd: 'elementalShieldEnd',
};

const _$DurationTypeEnumMap = {
  DurationType.none: 'None',
  DurationType.timeSec: 'TimeSec',
  DurationType.shots: 'Shots',
  DurationType.battles: 'Battles',
  DurationType.hits: 'Hits',
  DurationType.timeSecBattles: 'TimeSecBattles',
  DurationType.timeSecVer2: 'TimeSec_Ver2',
  DurationType.hitsVer2: 'Hits_Ver2',
  DurationType.reloadAllAmmoCount: 'ReloadAllAmmoCount',
  DurationType.unknown: 'Unknown',
};

const _$BattleRaptureActionTargetEnumMap = {
  BattleRaptureActionTarget.allNikkes: 'allNikkes',
  BattleRaptureActionTarget.allRaptures: 'allRaptures',
  BattleRaptureActionTarget.allRapturesExceptSelf: 'allRapturesExceptSelf',
  BattleRaptureActionTarget.allActors: 'allActors',
  BattleRaptureActionTarget.self: 'self',
  BattleRaptureActionTarget.targetedNikkes: 'targetedNikkes',
};

const _$BattleRaptureActionTargetSubtypeEnumMap = {
  BattleRaptureActionTargetSubtype.attack: 'attack',
  BattleRaptureActionTargetSubtype.defence: 'defence',
  BattleRaptureActionTargetSubtype.hp: 'hp',
  BattleRaptureActionTargetSubtype.hpRatio: 'hpRatio',
  BattleRaptureActionTargetSubtype.maxHp: 'maxHp',
  BattleRaptureActionTargetSubtype.hpCover: 'hpCover',
  BattleRaptureActionTargetSubtype.hpCoverRatio: 'hpCoverRatio',
  BattleRaptureActionTargetSubtype.maxHpCover: 'maxHpCover',
  BattleRaptureActionTargetSubtype.position: 'position',
};

const _$FunctionTypeEnumMap = {
  FunctionType.none: 'None',
  FunctionType.statAtk: 'StatAtk',
  FunctionType.healCharacter: 'HealCharacter',
  FunctionType.healCover: 'HealCover',
  FunctionType.attention: 'Attention',
  FunctionType.allAmmo: 'AllAmmo',
  FunctionType.stun: 'Stun',
  FunctionType.autoTargeting: 'AutoTargeting',
  FunctionType.statAccuracyCircle: 'StatAccuracyCircle',
  FunctionType.statCritical: 'StatCritical',
  FunctionType.statShotCount: 'StatShotCount',
  FunctionType.statChargeDamage: 'StatChargeDamage',
  FunctionType.statExplosion: 'StatExplosion',
  FunctionType.statReloadTime: 'StatReloadTime',
  FunctionType.statAmmo: 'StatAmmo',
  FunctionType.statDef: 'StatDef',
  FunctionType.statRateOfFire: 'StatRateOfFire',
  FunctionType.skillCooltime: 'SkillCooltime',
  FunctionType.immuneStun: 'ImmuneStun',
  FunctionType.statUltiGaugeSec: 'StatUltiGaugeSec',
  FunctionType.statUltiGaugeKill: 'StatUltiGaugeKill',
  FunctionType.statUltiGaugeUseSkill: 'StatUltiGaugeUseSkill',
  FunctionType.statUltiGaugeSkillHit: 'StatUltiGaugeSkillHit',
  FunctionType.statUltiGaugeShotHit: 'StatUltiGaugeShotHit',
  FunctionType.statUltiGaugeHurt: 'StatUltiGaugeHurt',
  FunctionType.statUltiGaugeEmptyAmmo: 'StatUltiGaugeEmptyAmmo',
  FunctionType.gainUltiGauge: 'GainUltiGauge',
  FunctionType.gainAmmo: 'GainAmmo',
  FunctionType.damageEnergy: 'DamageEnergy',
  FunctionType.damageMetal: 'DamageMetal',
  FunctionType.damageBio: 'DamageBio',
  FunctionType.taunt: 'Taunt',
  FunctionType.drainHp: 'DrainHp',
  FunctionType.drainUltiGauge: 'DrainUltiGauge',
  FunctionType.immuneEnergy: 'ImmuneEnergy',
  FunctionType.immuneMetal: 'ImmuneMetal',
  FunctionType.immuneBio: 'ImmuneBio',
  FunctionType.immuneDamage: 'ImmuneDamage',
  FunctionType.immuneDamageMainHp: 'ImmuneDamage_MainHP',
  FunctionType.ignoreDamage: 'IgnoreDamage',
  FunctionType.immortal: 'Immortal',
  FunctionType.gravityBomb: 'GravityBomb',
  FunctionType.damageReduction: 'DamageReduction',
  FunctionType.damageShare: 'DamageShare',
  FunctionType.damageRatioEnergy: 'DamageRatioEnergy',
  FunctionType.damageRatioMetal: 'DamageRatioMetal',
  FunctionType.damageRatioBio: 'DamageRatioBio',
  FunctionType.gaugeShield: 'GaugeShield',
  FunctionType.statProjectileSpeed: 'StatProjectileSpeed',
  FunctionType.useSkill1: 'UseSkill1',
  FunctionType.useSkill2: 'UseSkill2',
  FunctionType.statCriticalDamage: 'StatCriticalDamage',
  FunctionType.healVariation: 'HealVariation',
  FunctionType.healShare: 'HealShare',
  FunctionType.statPenetration: 'StatPenetration',
  FunctionType.linkAtk: 'LinkAtk',
  FunctionType.linkDef: 'LinkDef',
  FunctionType.statFirstDelay: 'StatFirstDelay',
  FunctionType.statEnergyResist: 'StatEnergyResist',
  FunctionType.statMetalResist: 'StatMetalResist',
  FunctionType.statBioResist: 'StatBioResist',
  FunctionType.statChargeTime: 'StatChargeTime',
  FunctionType.drainHpBuff: 'DrainHpBuff',
  FunctionType.statHp: 'StatHp',
  FunctionType.defIgnoreDamage: 'DefIgnoreDamage',
  FunctionType.atkChangHpRate: 'AtkChangHpRate',
  FunctionType.defChangHpRate: 'DefChangHpRate',
  FunctionType.forcedStop: 'ForcedStop',
  FunctionType.damageRecoverHeal: 'DamageRecoverHeal',
  FunctionType.fullBurstDamage: 'FullBurstDamage',
  FunctionType.infection: 'Infection',
  FunctionType.resurrection: 'Resurrection',
  FunctionType.useCharacterSkillId: 'UseCharacterSkillId',
  FunctionType.immuneForcedStop: 'ImmuneForcedStop',
  FunctionType.immuneGravityBomb: 'ImmuneGravityBomb',
  FunctionType.damage: 'Damage',
  FunctionType.damageRatioUp: 'DamageRatioUp',
  FunctionType.buffRemove: 'BuffRemove',
  FunctionType.debuffRemove: 'DebuffRemove',
  FunctionType.incReactTime: 'IncReactTime',
  FunctionType.incElementDmg: 'IncElementDmg',
  FunctionType.changeCoolTimeSkill1: 'ChangeCoolTimeSkill1',
  FunctionType.changeCoolTimeSkill2: 'ChangeCoolTimeSkill2',
  FunctionType.changeCoolTimeUlti: 'ChangeCoolTimeUlti',
  FunctionType.changeCoolTimeAll: 'ChangeCoolTimeAll',
  FunctionType.statEndRateOfFire: 'StatEndRateOfFire',
  FunctionType.statRateOfFirePerShot: 'StatRateOfFirePerShot',
  FunctionType.coreShotDamageChange: 'CoreShotDamageChange',
  FunctionType.coreShotDamageRateChange: 'CoreShotDamageRateChange',
  FunctionType.debuffImmune: 'DebuffImmune',
  FunctionType.incBurstDuration: 'IncBurstDuration',
  FunctionType.changeHp: 'ChangeHp',
  FunctionType.plusBuffCount: 'PlusBuffCount',
  FunctionType.plusDebuffCount: 'PlusDebuffCount',
  FunctionType.statHpHeal: 'StatHpHeal',
  FunctionType.addDamage: 'AddDamage',
  FunctionType.breakDamage: 'BreakDamage',
  FunctionType.hpProportionDamage: 'HpProportionDamage',
  FunctionType.normalStatCritical: 'NormalStatCritical',
  FunctionType.copyAtk: 'CopyAtk',
  FunctionType.copyDef: 'CopyDef',
  FunctionType.copyHp: 'CopyHp',
  FunctionType.firstBurstGaugeSpeedUp: 'FirstBurstGaugeSpeedUp',
  FunctionType.instantDeath: 'InstantDeath',
  FunctionType.immuneInstantDeath: 'ImmuneInstantDeath',
  FunctionType.changeCurrentHpValue: 'ChangeCurrentHpValue',
  FunctionType.singleBurstDamage: 'SingleBurstDamage',
  FunctionType.hide: 'Hide',
  FunctionType.statAmmoLoad: 'StatAmmoLoad',
  FunctionType.coverResurrection: 'CoverResurrection',
  FunctionType.immuneOtherElement: 'ImmuneOtherElement',
  FunctionType.burstGaugeCharge: 'BurstGaugeCharge',
  FunctionType.partsDamage: 'PartsDamage',
  FunctionType.projectileDamage: 'ProjectileDamage',
  FunctionType.silence: 'Silence',
  FunctionType.windReduction: 'WindReduction',
  FunctionType.electronicReduction: 'ElectronicReduction',
  FunctionType.fireReduction: 'FireReduction',
  FunctionType.waterReduction: 'WaterReduction',
  FunctionType.ironReduction: 'IronReduction',
  FunctionType.changeMaxSkillCoolTime1: 'ChangeMaxSkillCoolTime1',
  FunctionType.changeMaxSkillCoolTime2: 'ChangeMaxSkillCoolTime2',
  FunctionType.changeMaxSkillCoolTimeUlti: 'ChangeMaxSkillCoolTimeUlti',
  FunctionType.healDecoy: 'HealDecoy',
  FunctionType.transformation: 'Transformation',
  FunctionType.immortalValue: 'ImmortalValue',
  FunctionType.statMaintainFireStance: 'StatMaintainFireStance',
  FunctionType.atkChangeMaxHpRate: 'AtkChangeMaxHpRate',
  FunctionType.overHealSave: 'OverHealSave',
  FunctionType.chargeTimeChangetoDamage: 'ChargeTimeChangetoDamage',
  FunctionType.timingTriggerValueChange: 'TimingTriggerValueChange',
  FunctionType.targetGroupid: 'TargetGroupid',
  FunctionType.finalStatHp: 'FinalStatHp',
  FunctionType.finalStatHpHeal: 'FinalStatHpHeal',
  FunctionType.cycleUse: 'CycleUse',
  FunctionType.damageShareInstant: 'DamageShareInstant',
  FunctionType.targetPartsId: 'TargetPartsId',
  FunctionType.partsHpChangeUIOff: 'PartsHpChangeUIOff',
  FunctionType.partsHpChangeUIOn: 'PartsHpChangeUIOn',
  FunctionType.statBonusRangeMax: 'StatBonusRangeMax',
  FunctionType.statBonusRangeMin: 'StatBonusRangeMin',
  FunctionType.uncoverable: 'Uncoverable',
  FunctionType.callingMonster: 'CallingMonster',
  FunctionType.statBurstSkillCoolTime: 'StatBurstSkillCoolTime',
  FunctionType.immuneChangeCoolTimeUlti: 'ImmuneChangeCoolTimeUlti',
  FunctionType.shareDamageIncrease: 'ShareDamageIncrease',
  FunctionType.fullChargeHitDamageRepeat: 'FullChargeHitDamageRepeat',
  FunctionType.chargeDamageChangeMaxStatAmmo: 'ChargeDamageChangeMaxStatAmmo',
  FunctionType.statSpotRadius: 'StatSpotRadius',
  FunctionType.penetrationDamage: 'PenetrationDamage',
  FunctionType.damageShareInstantUnable: 'DamageShareInstantUnable',
  FunctionType.damageFunctionUnable: 'DamageFunctionUnable',
  FunctionType.statChargeTimeImmune: 'StatChargeTimeImmune',
  FunctionType.allStepBurstKeepStep: 'AllStepBurstKeepStep',
  FunctionType.allStepBurstNextStep: 'AllStepBurstNextStep',
  FunctionType.incBarrierHp: 'IncBarrierHp',
  FunctionType.healBarrier: 'HealBarrier',
  FunctionType.explosiveCircuitAccrueDamageRatio: 'ExplosiveCircuitAccrueDamageRatio',
  FunctionType.atkReplaceMaxHpRate: 'AtkReplaceMaxHpRate',
  FunctionType.fixStatReloadTime: 'FixStatReloadTime',
  FunctionType.defIgnoreDamageRatio: 'DefIgnoreDamageRatio',
  FunctionType.changeNormalDefIgnoreDamage: 'ChangeNormalDefIgnoreDamage',
  FunctionType.bonusRangeDamageChange: 'BonusRangeDamageChange',
  FunctionType.givingHealVariation: 'GivingHealVariation',
  FunctionType.removeFunctionGroup: 'RemoveFunctionGroup',
  FunctionType.normalDamageRatioChange: 'NormalDamageRatioChange',
  FunctionType.normalStatCriticalDamage: 'NormalStatCriticalDamage',
  FunctionType.functionOverlapChange: 'FunctionOverlapChange',
  FunctionType.durationValueChange: 'DurationValueChange',
  FunctionType.durationDamageRatio: 'DurationDamageRatio',
  FunctionType.repeatUseBurstStep: 'RepeatUseBurstStep',
  FunctionType.partsImmuneDamage: 'PartsImmuneDamage',
  FunctionType.barrierDamage: 'BarrierDamage',
  FunctionType.currentHpRatioDamage: 'CurrentHpRatioDamage',
  FunctionType.statReloadBulletRatio: 'StatReloadBulletRatio',
  FunctionType.immuneAttention: 'ImmuneAttention',
  FunctionType.immuneInstallBarrier: 'ImmuneInstallBarrier',
  FunctionType.immuneTaunt: 'ImmuneTaunt',
  FunctionType.fullCountDamageRatio: 'FullCountDamageRatio',
  FunctionType.addIncElementDmgType: 'AddIncElementDmgType',
  FunctionType.changeUseBurstSkill: 'ChangeUseBurstSkill',
  FunctionType.changeChangeBurstStep: 'ChangeChangeBurstStep',
  FunctionType.stickyProjectileExplosion: 'StickyProjectileExplosion',
  FunctionType.stickyProjectileCollisionDamage: 'StickyProjectileCollisionDamage',
  FunctionType.projectileExplosionDamage: 'ProjectileExplosionDamage',
  FunctionType.stickyProjectileInstantExplosion: 'StickyProjectileInstantExplosion',
  FunctionType.minusDebuffCount: 'MinusDebuffCount',
  FunctionType.atkBuffChange: 'AtkBuffChange',
  FunctionType.outBonusRangeDamageChange: 'OutBonusRangeDamageChange',
  FunctionType.instantAllBurstDamage: 'InstantAllBurstDamage',
  FunctionType.plusInstantSkillTargetNum: 'PlusInstantSkillTargetNum',
  FunctionType.statInstantSkillRange: 'StatInstantSkillRange',
  FunctionType.damageFunctionTargetGroupId: 'DamageFunctionTargetGroupId',
  FunctionType.damageFunctionValueChange: 'DamageFunctionValueChange',
  FunctionType.dmgReductionExcludingBreakCol: 'DmgReductionExcludingBreakCol',
  FunctionType.changeHurtFxExcludingBreakCol: 'ChangeHurtFxExcludingBreakCol',
  FunctionType.focusAttack: 'FocusAttack',
  FunctionType.immediatelyBuffCheckImmune: 'ImmediatelyBuffCheckImmune',
  FunctionType.durationBuffCheckImmune: 'DurationBuffCheckImmune',
  FunctionType.immediatelyDebuffCheckImmune: 'ImmediatelyDebuffCheckImmune',
  FunctionType.durationDebuffCheckImmune: 'DurationDebuffCheckImmune',
  FunctionType.noOverlapStatAmmo: 'NoOverlapStatAmmo',
  FunctionType.durationDamage: 'DurationDamage',
  FunctionType.defIgnoreSkillDamageInstant: 'DefIgnoreSkillDamageInstant',
  FunctionType.emptyFunction: 'EmptyFunction',
  FunctionType.damageShareLowestPriority: 'DamageShareLowestPriority',
  FunctionType.forcedReload: 'ForcedReload',
  FunctionType.statDefNoneBreakCol: 'StatDefNoneBreakCol',
  FunctionType.changeHealChargeValue: 'ChangeHealChargeValue',
  FunctionType.unknown: 'Unknown',
};

BattleRaptureParts _$BattleRapturePartsFromJson(Map<String, dynamic> json) => BattleRaptureParts(
  id: (json['id'] as num).toInt(),
  name: json['name'] as String? ?? 'Part',
  maxHp: (json['maxHp'] as num?)?.toInt() ?? 10000,
  isBehindBoss: json['isBehindBoss'] as bool? ?? true,
  isCore: json['isCore'] as bool? ?? false,
);

Map<String, dynamic> _$BattleRapturePartsToJson(BattleRaptureParts instance) => <String, dynamic>{
  'id': instance.id,
  'name': instance.name,
  'maxHp': instance.maxHp,
  'isBehindBoss': instance.isBehindBoss,
  'isCore': instance.isCore,
};
